# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  desc "Increment build number and push to repository - Build number in this case is the android version code"
  lane :ibn do |options|
    should_commit = options.fetch(:should_commit, true)
    commit_message = options.fetch(:commit_message, "android: bump build number (version code) [skip ci]")
    should_push = options.fetch(:should_push, true)

    ensure_git_status_clean if should_commit

    params = {
      :app_project_dir => 'app'
    }
    if options[:build_number]
      params[:version_code] = options[:build_number].to_i
    end

    android_increment_version_code(params)
    new_version_code = Actions.lane_context[Actions::SharedValues::ANDROID_VERSION_CODE]
    UI.important("Incremented android version code to #{new_version_code}")

    if should_commit
      path = "android/app/build.gradle"
      git_add(path: path)
      git_commit(path: path, message: commit_message)
      # Push the new commit and tag back to your git remote
      push_to_git_remote if should_push
    end
  end

  desc "Increment version number and push to repository - Version number in this case is the android version name"
  lane :ivn do |options|
    should_commit = options.fetch(:should_commit, true)
    commit_message = options.fetch(:commit_message, "android: bump version number (version name) [skip ci]")
    should_push = options.fetch(:should_push, true)

    # Ensure that your git status is not dirty
    ensure_git_status_clean if should_commit

    increment_type = options.fetch(:increment_type, "patch")
    new_version_params = options[:version]

    params = {
      app_project_dir: 'app',
      increment_type: increment_type,
    }

    unless new_version_params.nil?()
      params[:version_name] = new_version_params
    end

    android_increment_version_name(params)
    new_version_name = Actions.lane_context[Actions::SharedValues::ANDROID_VERSION_NAME]
    UI.important("Incremented android version name to #{new_version_name}")

    if should_commit
      path = "android/app/build.gradle"
      git_add(path: path)
      git_commit(path: path, message: commit_message)
      # Push the new commit and tag back to your git remote
      push_to_git_remote if should_push
    end
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
    telegram(
      token: ENV['TG_BOT_TOKEN'],
      chat_id: ENV['TG_CHAT_ID'],
      text: "Tests for Android ran successfully!"
    )
  end

  desc "Submit a new Internal Beta Build"
  lane :internal do
    gradle(task: "clean assembleBundle")
    upload_to_play_store(track: "internal")
    new_version_name = Actions.lane_context[Actions::SharedValues::ANDROID_VERSION_NAME]
    telegram(
      token: ENV['TG_BOT_TOKEN'],
      chat_id: ENV['TG_CHAT_ID'],
      text: "New internal beta release published! Version #{new_version_name} can be now downloaded by internal testers."
    )
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleBundle")
    upload_to_play_store
    new_version_name = Actions.lane_context[Actions::SharedValues::ANDROID_VERSION_NAME]
    telegram(
      token: ENV['TG_BOT_TOKEN'],
      chat_id: ENV['TG_CHAT_ID'],
      text: "WOOP! WOOP! A new public release happend! Version #{new_version_name} can be now downloaded from the Play Store."
    )
  end
end
